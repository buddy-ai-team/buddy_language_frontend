// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createUserFromDiscriminatorValue, serializeUser, type User } from './user';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export function createWordEntityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWordEntity;
}
export function deserializeIntoWordEntity(wordEntity: WordEntity | undefined = {} as WordEntity) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { wordEntity.id = n.getGuidValue(); },
        "language": n => { wordEntity.language = n.getNumberValue(); },
        "user": n => { wordEntity.user = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
        "userId": n => { wordEntity.userId = n.getGuidValue(); },
        "word": n => { wordEntity.word = n.getStringValue(); },
        "wordStatus": n => { wordEntity.wordStatus = n.getNumberValue(); },
    }
}
export function serializeWordEntity(writer: SerializationWriter, wordEntity: WordEntity | undefined = {} as WordEntity) : void {
        writer.writeGuidValue("id", wordEntity.id);
        writer.writeNumberValue("language", wordEntity.language);
        writer.writeObjectValue<User>("user", wordEntity.user, serializeUser);
        writer.writeGuidValue("userId", wordEntity.userId);
        writer.writeStringValue("word", wordEntity.word);
        writer.writeNumberValue("wordStatus", wordEntity.wordStatus);
}
export interface WordEntity extends Parsable {
    /**
     * The id property
     */
    id?: Guid;
    /**
     * The language property
     */
    language?: number;
    /**
     * The user property
     */
    user?: User;
    /**
     * The userId property
     */
    userId?: Guid;
    /**
     * The word property
     */
    word?: string;
    /**
     * The wordStatus property
     */
    wordStatus?: number;
}
// tslint:enable
// eslint-enable
